package aes

import (
	"errors"
	"fmt"
)

const (
	MODE_CBC = 0

	BLOCK_SIZE = 16 // 128 bits
)

type AES struct {
	iv         []byte
	key        []byte
	roundedKey []uint32

	nr int
}

func (aes *AES) Encrypt(plain []byte) []byte {
	retBytes := make([]byte, len(plain))
	var block [BLOCK_SIZE]byte
	var tmpIV []byte
	tmpIV = append(tmpIV[:], aes.iv[:]...)

	var plainLen = len(plain)
	for i := 0; i < plainLen; i += BLOCK_SIZE {
		copy(block[:], plain[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE])
		for i := 0; i < BLOCK_SIZE; i++ {
			block[i] ^= tmpIV[i]
		}
		block = aes.encryptBlob(block)
		copy(tmpIV[:], block[:])
		copy(retBytes[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE], block[:])
	}
	return retBytes
}

func (aes *AES) Decrypt(encrypted []byte) []byte {
	var encryptedLen = len(encrypted)
	retBytes := make([]byte, encryptedLen)
	var block [BLOCK_SIZE]byte
	var tmpIV []byte
	tmpIV = append(tmpIV[:], aes.iv[:]...)

	for i := 0; i < encryptedLen; i += BLOCK_SIZE {
		copy(block[:], encrypted[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE])
		block = aes.decryptBlob(block)
		for i := 0; i < BLOCK_SIZE; i++ {
			block[i] ^= tmpIV[i]
		}
		copy(tmpIV[:], encrypted[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE])
		copy(retBytes[i*BLOCK_SIZE:(i+1)*BLOCK_SIZE], block[:])
	}
	return retBytes
}

func (aes *AES) setIV(iv []byte) error {
	if len(iv) != BLOCK_SIZE {
		return errors.New(fmt.Sprintf("Initialization Vector 's length should be %d", BLOCK_SIZE))
	}
	aes.iv = append(aes.iv, iv[:]...)
	return nil
}

func (aes *AES) setKey(key []byte) error {
	keyLen := len(key)
	if keyLen == 4 || keyLen == 6 || keyLen == 8 {
		if keyLen == 4 {
			aes.nr = 10
		} else if keyLen == 6 {
			aes.nr = 12
		} else if keyLen == 8 {
			aes.nr = 14
		}
		aes.keyExpansion(key)
		return nil
	} else {
		return errors.New("key length should be 128, 192 or 256 bits")
	}
}

var sbox = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

var rsbox = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

var rcon = [256]byte{
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
}

func (aes *AES) encryptBlob(in [16]byte) [16]byte {

	state := in

	state = addRoundKey(state, aes.roundedKey[0:4])

	for round := 1; round < aes.nr; round++ {
		state = subBytes(state)
		state = shiftRows(state)
		state = mixColumns(state)
		state = addRoundKey(state, aes.roundedKey[round*4:(round+1)*4])
	}

	state = subBytes(state)
	state = shiftRows(state)
	state = addRoundKey(state, aes.roundedKey[aes.nr*4:(aes.nr+1)*4])
	return state
}
func (aes *AES) decryptBlob(in [16]byte) [16]byte {

	state := in

	state = addRoundKey(state, aes.roundedKey[aes.nr*4:(aes.nr+1)*4])

	for round := aes.nr - 1; round > 1; round-- {
		state = invShiftRows(state)
		state = invSubBytes(state)
		state = addRoundKey(state, aes.roundedKey[round*4:(round+1)*4])
		state = invMixColumns(state)
	}

	state = invShiftRows(state)
	state = invSubBytes(state)
	state = addRoundKey(state, aes.roundedKey[0:4])
	return state
}

func (aes *AES) keyExpansion(key []byte) {
	var i int
	nk := int(len(key) / 4)

	aes.roundedKey = make([]uint32, nk)
	for i = 0; i < nk; i++ {
		aes.roundedKey[i] = uint32(key[4*i]<<24 | key[i*4+1]<<16 | key[i*4+2]<<8 | key[i*4+3])
	}

	i = nk
	mark := 4 * (aes.nr + 1)
	for i < mark {
		temp := aes.roundedKey[i-1]
		if i%nk == 0 {
			temp = subWord(rotWord(temp)) ^ uint32(rcon[i/nk])
		} else if nk > 6 && i%nk == 4 {
			temp = subWord(temp)
		}
		aes.roundedKey[i] = aes.roundedKey[i-nk] ^ temp
	}
}

func addRoundKey(state [16]byte, w []uint32) [16]byte {
	var retBytes [16]byte

	s0 := (uint32(state[0])<<24 | uint32(state[1])<<16 | uint32(state[2])<<8 | uint32(state[3])) ^ w[0]
	s1 := (uint32(state[4])<<24 | uint32(state[5])<<16 | uint32(state[6])<<8 | uint32(state[7])) ^ w[1]
	s2 := (uint32(state[8])<<24 | uint32(state[9])<<16 | uint32(state[10])<<8 | uint32(state[11])) ^ w[2]
	s3 := (uint32(state[12])<<24 | uint32(state[13])<<16 | uint32(state[14])<<8 | uint32(state[15])) ^ w[3]

	retBytes[0] = byte(s0 >> 24 & 0xff)
	retBytes[1] = byte(s0 >> 16 & 0xff)
	retBytes[2] = byte(s0 >> 8 & 0xff)
	retBytes[3] = byte(s0 & 0xff)
	retBytes[4] = byte(s1 >> 24 & 0xff)
	retBytes[5] = byte(s1 >> 16 & 0xff)
	retBytes[6] = byte(s1 >> 8 & 0xff)
	retBytes[7] = byte(s1 & 0xff)
	retBytes[8] = byte(s2 >> 24 & 0xff)
	retBytes[9] = byte(s2 >> 16 & 0xff)
	retBytes[10] = byte(s2 >> 8 & 0xff)
	retBytes[11] = byte(s2 & 0xff)
	retBytes[12] = byte(s3 >> 24 & 0xff)
	retBytes[13] = byte(s3 >> 16 & 0xff)
	retBytes[14] = byte(s3 >> 8 & 0xff)
	retBytes[15] = byte(s3 & 0xff)

	return retBytes
}

func subBytes(state [16]byte) [16]byte {
	var retBytes [16]byte

	for i := 0; i < 16; i++ {
		retBytes[i] = rsbox[state[i]]
	}

	return retBytes
}
func invSubBytes(state [16]byte) [16]byte {
	var retBytes [16]byte

	for i := 0; i < 16; i++ {
		retBytes[i] = sbox[state[i]]
	}

	return retBytes
}

func shiftRows(state [16]byte) [16]byte {
	var retBytes [16]byte

	retBytes[0] = state[0]
	retBytes[1] = state[1]
	retBytes[2] = state[2]
	retBytes[3] = state[3]

	retBytes[4] = state[5]
	retBytes[5] = state[6]
	retBytes[6] = state[7]
	retBytes[7] = state[4]

	retBytes[8] = state[10]
	retBytes[9] = state[11]
	retBytes[10] = state[8]
	retBytes[11] = state[9]

	retBytes[12] = state[15]
	retBytes[13] = state[12]
	retBytes[14] = state[13]
	retBytes[15] = state[14]

	return retBytes
}
func invShiftRows(state [16]byte) [16]byte {
	var retBytes [16]byte

	retBytes[0] = state[0]
	retBytes[1] = state[1]
	retBytes[2] = state[2]
	retBytes[3] = state[3]

	retBytes[4] = state[7]
	retBytes[5] = state[4]
	retBytes[6] = state[5]
	retBytes[7] = state[6]

	retBytes[8] = state[10]
	retBytes[9] = state[11]
	retBytes[10] = state[8]
	retBytes[11] = state[9]

	retBytes[12] = state[13]
	retBytes[13] = state[14]
	retBytes[14] = state[15]
	retBytes[15] = state[12]

	return retBytes
}

func xtime(x byte) byte {
	return (x << 1) ^ (((x >> 7) & 1) * 0x1b)
}
func multiply(x, y byte) byte {
	return ((y & 1) * x) ^
		(((y >> 1) & 1) * xtime(x)) ^
		(((y >> 2) & 1) * xtime(xtime(x))) ^
		(((y >> 3) & 1) * xtime(xtime(xtime(x)))) ^
		(((y >> 4) & 1) * xtime(xtime(xtime(xtime(x)))))
}
func mixColumns(state [16]byte) [16]byte {
	var retBytes [16]byte

	var tmp, tm byte
	for i := 0; i < 4; i++ {
		t := state[i*4]
		tmp = state[i*4] ^ state[i*4+1] ^ state[i*4+2] ^ state[i*4+2] ^ state[i*4+3]
		tm = state[i*4] ^ state[i*4+1]
		tm = xtime(tm)
		state[i*4] = state[i*4] ^ tm ^ tmp
		tm = state[i*4+1] ^ state[i*4+2]
		tm = xtime(tm)
		state[i*4+1] = state[i*4+1] ^ tm ^ tmp
		tm = state[i*4+2] ^ state[i*4+3]
		tm = xtime(tm)
		state[i*4+2] = state[i*4+2] ^ tm ^ tmp
		tm = state[i*4+3] ^ t
		tm = xtime(tm)
		state[i*4+3] = state[i*4+3] ^ tm ^ tmp
	}
	return retBytes

}
func invMixColumns(state [16]byte) [16]byte {
	var a, b, c, d byte
	for i := 0; i < 4; i++ {
		a = state[i*4]
		b = state[i*4+1]
		c = state[i*4+2]
		d = state[i*4+3]

		state[i*4] = multiply(a, 0x0e) ^ multiply(b, 0x0b) ^ multiply(c, 0x0d) ^ multiply(d, 0x09)
		state[i*4+1] = multiply(a, 0x09) ^ multiply(b, 0x0e) ^ multiply(c, 0x0b) ^ multiply(d, 0x0d)
		state[i*4+2] = multiply(a, 0x0d) ^ multiply(b, 0x09) ^ multiply(c, 0x0e) ^ multiply(d, 0x0b)
		state[i*4+3] = multiply(a, 0x0b) ^ multiply(b, 0x0d) ^ multiply(c, 0x09) ^ multiply(d, 0x0e)
	}
	return state
}

func subWord(w uint32) uint32 {
	return uint32(sbox[w>>24&0xff]<<24) | uint32(sbox[w>>16&0xff]<<16) | uint32(sbox[w>>8&0xff]<<8) | uint32(sbox[w>>8&0xff]<<8)
}
func rotWord(w uint32) uint32 {
	return w<<8 | w>>24
}
